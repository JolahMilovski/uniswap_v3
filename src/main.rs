pub mod uniswap_v3;
pub mod uniswap_graph;
pub mod token;
pub mod uniswap_cache;
pub mod uniswap_events;
pub mod provider;

use provider::get_working_provider;
use uniswap_cache::UniswapPoolCache;
use uniswap_events::UniswapEventSubscriber;
use uniswap_graph::UniversalGraph;

use crate::token::TokenInfo;
use token::load_token_cache;

use dotenv::dotenv;
use env_logger::Env;
use log::{error, info};
use ethers::{providers::{Provider, Ws}, types::Address};
use std::{collections::{HashMap, HashSet}, env, sync::Arc};
use tokio::{signal, sync::Mutex};


#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenv().ok();

    env_logger::Builder::from_env(Env::default().default_filter_or("info"))
        .format_timestamp(None)
        .init();
    info!("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–ª–æ–∫—á–µ–Ω—É");

    // –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    let provider: Arc<Provider<Ws>> = get_working_provider().await;

    info!("–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ –∞–ª—Ö–∏–º–∏–µ—Å–∫–∏–µ –≤—Ä–∞—Ç–∞");

    // ‚õì –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω-–∫—ç—à–∞
    type TokenCache = Arc<Mutex<HashMap<Address, TokenInfo>>>;

    let token_cache: TokenCache = Arc::new(Mutex::new(
        match load_token_cache().await {
            Some(cache) => {
                info!("[–ö–≠–®] Token –∫—ç—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω");
                cache
            }
            None => {
                info!("[–ö–≠–®] Token –∫—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π");
                HashMap::new()
            }
        }
    ));

    // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ token_list.json –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ø–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    let token_whitelist_set: HashSet<Address> = token::load_token_list_from_json("token_list.json").keys().cloned().collect();
    info!("[–¢–û–ü] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ token_list.json", token_whitelist_set.len());

    // –°–æ–∑–¥–∞–µ–º UniversalGraph
    let graph = Arc::new(Mutex::new(UniversalGraph::new()));

    let pool_cache: Arc<Mutex<UniswapPoolCache>> = Arc::new(Mutex::new(
        match UniswapPoolCache::load_from_file() {
            Ok(cache) => {
                info!("[–ö–≠–®] –ö—ç—à –ø—É–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å –¥–∏—Å–∫–∞");
                cache
            }
            Err(_) => {
                info!("[–ö–≠–®] –ö—ç—à –ø—É–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π");
                UniswapPoolCache::new()
            }
        }
    ));

    let start = std::time::Instant::now();
    info!("‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—É–ª–æ–≤ –Ω–∞—á–∞—Ç–∞...");

    // –ö–ª–æ–Ω–∏—Ä—É–µ–º Arc –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ sync_pools
    let graph_for_sync = Arc::clone(&graph);

    let start_block = get_env_var("START_BLOCK").parse::<u64>()?;

    uniswap_v3::sync_pools(graph_for_sync, Arc::clone(&provider), &Arc::clone(&token_cache), Arc::clone(&pool_cache), &token_whitelist_set, start_block).await?;

    let pool_cache = pool_cache.lock().await;
     
    if let Err(e) = pool_cache.save_to_file() {
        error!("[–ö–≠–®] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞ –ø—É–ª–æ–≤: {:?}", e);
    } else {
        info!("[–ö–≠–®] –ö—ç—à –ø—É–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
    }

    if let Err(e) = pool_cache.save_to_json_debug("debug_uniswap_cache.json") {
        error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ—à–∞ Uniswap –≤ JSON: {:?}", e);
    } else {
        info!("–ö–µ—à Uniswap —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ debug_uniswap_cache.json");
    }

    // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    let subscriber = Arc::new(UniswapEventSubscriber::new(
        Arc::clone(&provider),
        Arc::clone(&graph),
    ));

    // 1. –°–ø–∞–≤–Ω–∏–º –ø–æ–¥–ø–∏—Å–∫—É
    let subscriber_clone = Arc::clone(&subscriber);

    let handle = tokio::spawn(async move {
        if let Err(e) = subscriber_clone.subscribe_to_events_for_all_pools().await {
            error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: {:?}", e);
        }
    });

    // 2. –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (Ctrl+C)
    tokio::select! {
        _ = signal::ctrl_c() => {
            info!("üö™ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
        },
        _ = handle => {
            info!("–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        },
    }
    
    let duration = start.elapsed();
    let secs = duration.as_secs();
    let minutes = secs / 60;
    let seconds = secs % 60;

    info!("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—É–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {} –º–∏–Ω—É—Ç {} —Å–µ–∫—É–Ω–¥", minutes, seconds);
    info!("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–æ–≤");

    Ok(())
}


pub fn get_env_var(var_name: &str) -> String {
    env::var(var_name).unwrap_or_else(|_| panic!("Environment variable {} not found", var_name))
}
